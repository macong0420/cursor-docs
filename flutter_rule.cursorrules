
You are an expert in Flutter, Dart.

# General Guidelines
- Use Chinese for all documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using 'any'; prefer explicit types.
- Create necessary types to avoid using dynamic typing.
- Use PascalCase for classes and camelCase for variables, functions, and methods.

# Nomenclature
- Use underscores_case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers by defining constants.
- Start each function with a verb; use complete words instead of abbreviations, except for well-known abbreviations like API or URL.

# Code Style
- Write short functions with a single responsibility.
- Organize files logically by feature or functionality.
- Use Flutter's setState responsibly and avoid overuse.

# Performance
- Optimize widget rebuilds by using const constructors where possible.
- Use Flutter's built-in widgets and animations for performance optimization.

# UI and Styling
- Follow responsive design principles.
- Use consistent styling conventions across the app.

# Testing and Maintenance
- Write unit tests for logical parts of code.
- Use integration tests for user journeys.

# Key Principles
- Write concise, technical Dart code with accurate examples.
- Use functional and declarative programming patterns where appropriate.
- Prefer composition over inheritance.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported widget, subwidgets, helpers, static content, types.

# Dart/Flutter
- Use const constructors for immutable widgets.
- Leverage Freezed for immutable state classes and unions.
- Use arrow syntax for simple functions and methods.
- Prefer expression bodies for one-line getters and setters.
- Use trailing commas for better formatting and diffs.

# Error Handling and Validation
- Implement error handling in views using SelectableText.rich instead of SnackBars.
- Display errors in SelectableText.rich with red color for visibility.
- Handle empty states within the displaying screen.
- Use AsyncValue for proper error handling and loading states.

# Provider
- Call notifyListeners() only when the state has changed and the UI needs to be updated. Frequent calls may lead to performance issues.
- Dispose of listeners:
- If ChangeNotifier contains resources such as streams or timers, release them in the dispose method. Ensure proper create and dispose callbacks are set in ChangeNotifierProvider.
- Avoid performing time-consuming tasks in the constructor:
- Tasks such as network requests or database reads should be handled using dedicated methods to avoid blocking UI initialization.

- Separate logic from UI:
- Encapsulate business logic within the ChangeNotifier, exposing only the necessary methods and properties. Avoid directly manipulating business logic in UI code.
- Minimize rebuild scope:
- Use Selector to track specific state changes, ensuring only affected components are rebuilt instead of the entire widget tree.

# Performance Optimization
- Use const widgets where possible to optimize rebuilds.
- Implement list view optimizations (e.g., ListView.builder).
- Use AssetImage for static images and cached_network_image for remote images.
- Implement proper error handling for Supabase operations, including network errors.

# UI and Styling
- Use Flutter's built-in widgets and create custom widgets.
- Implement responsive design using LayoutBuilder or MediaQuery.
- Use themes for consistent styling across the app.
- Use Theme.of(context).textTheme.titleLarge instead of headline6, and headlineSmall instead of headline5 etc.
- Create small, private widget classes instead of methods like Widget _build....
- Implement SmartRefresher for pull-to-refresh functionality.
- In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction.
- Always include an errorBuilder when using Image.network.

Documentation
- Document complex logic and non-obvious code decisions.
- Follow official Flutter, Riverpod, and Supabase documentation for best practices.

    
